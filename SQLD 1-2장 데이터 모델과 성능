▶ 1절 성능 데이터 모델링의 개요

1) 성능 데이터 모델링: DB 성능향상을 위한 사항이 데이터 모델링에 반영되도록 하는 것
2) 수행 시점: 분석/설계 단계, 성능 데이터 모델링 시점이 늦어질수록 재업무 비용 상승
3) 고려 사항: 정규화 수행 / DB 용량 산정과 트랜잭션 유형 파악을 통한 반정규화 수행 / 정규화는 필수!!

▶ 2절 정규화와 성능
1) 정규화(Normalization): 데이터 분해 과정, 이상현상 제거
=> 정규형(Normal Form): 정규화로 도출된 데이터 모델이 갖춰야 할 특성

2) 함수적 종속성(Functional Dependency): 결정자와 종속자의 관계, 결정자의 값으로 종속자의 값을 알 수 있음
=> 다치 종속(Multivalued Dependency): 여러 칼럼이 동일한 결정자의 종속자일때

3) 정규화 이론: 1/2/3 차 보이스코드 정규화는 함수적 종속성에 근거 / 4차 정규화는 다치 종속을 제거 / 5차 정규화는
조인에 의한 이상현상을 제거하여 정규화를 수행
=> 1차 정규화: 속성의 원자성 확보, 다중값 속성을 분리함
=> 2차 정규화: 부분 함수 종속성 제거, 일부 기본키에만 종속된 속성을 분리 / 기본키가 하나의 칼럼일 때 생략 가능
=> 3차 정규화: 이행 함수 종속성 제거, 서로 종속관계가 있는 일반속성을 분리함, 주식별자와 관련성이 가장 낮음
=> 보이스코드 정규화(BCNF): 후보키가 기본키 속성 중 일부에 함수적 종속일 때 다수의 주식별자를 분리함
=> 4차/5차 정규화: 다치 종속 분리, 결합 종속 분리

4) 정규화와 성능: 정규화는 입출력 데이터의 양을 줄여 성능 향상
=> 정규화로 인한 성능 향상: 입력/수정/삭제 시 성능은 항상 향상
- 유연성 증가: High Cohesion & Loose Coupling 원칙에 충실해짐
- 재활용 가능성 증가: 개념 세분화
- 데이터 중복 최소화
=> 정규화로 인한 성능 저하: 조회 시 처리 조건에 따라 성능 저하가 발생
- 데이터 조회 시 조인을 유발하여 CPU와 메모리를 많이 사용
# 반정규화로 해결 가능, 조인이 발생하더라도 인덱스를 사용하여 조인 연산을 수행하면 단점이 거의 없음(필요한 인덱스 수 줄이기 가능)
# 정규화를 통해 소량의 테이블이 생성된다면 성능 상 유리

▶ 3절 반정규화와 성능
1) 반정규화(Denormalization): 데이터 중복을 허용하여 조인을 줄이는 DB 성능 향상 방법, 데이터의 무결성을 희생하고 조회 성능 향상

2) 절차
=> 반정규화 대상 조사: 데이터 처리 범위 및 통계성 조사
=> 다른 방법 검토: 뷰 / 클러스터링 / 인덱스 / 애플리케이션
=> 반정규화 적용: 정규화 수행 후 반정규화 수행

3)기법
=> 테이블 반정규화
- 테이블 병합: 1:1 관계 / 1:n 관계 테이블 병합 (데이터 중복 발생) / 슈퍼.서브타입 테이블 병합
- 테이블 분할: 수직분할 / 수평분할
- 테이블 추가: 중복 테이블(업무나 서버가 다를 때) / 통계 테이블 / 이력 테이블 / 부분 테이블
=> 칼럼 반정규화
- 중복 칼럼 추가
- 파생 칼럼 추가: 필요한 값 미리 계산한 칼럼 추가
- 이력 테이블 칼럼 추가
- PK에 의한 칼럼 추가: PK의 종속자를 일반속성으로 생성
- 응용 시스템의 오작동을 위한 칼럼 추가
=> 관계 반정규화 (데이테 무결성 보장 가능)
- 중복 관계 추가

▶ 4절 대용량 데이터에 따른 성능 (테이블 반정규화 중 테이블 분할 관련)
1) 블록: 테이블의 데이터 저장 단위

2) 대량 데이터 발생으로 인한 현상: 블록 I/O 횟수 증가 ( 디스크 I/O 가능성 상승, 성능 저하)
=> 로우 체이닝(Row Chaining): 행 길이가 너무 길어 여러 블록에 걸쳐 저장되는 현상
=> 로우 마이그레이션(Row Migration): 수정된 데이터가 해당 블록이 아닌 다른 블록의 빈 공간에 저장되는 현상

3) 테이블 분할 (반정규화 기법)
=> 수직분할: 칼럼 단위로 테이블을 분할하여 I/O를 감소시킴, 너무 많은 수의 칼럼이 있는 경우 사용
=> 수평분할: 행 단위로 테이블을 분할하여 I/O를 감소시킴

4) 파티셔닝(Partitioning): 테이블 수평분할 기법, 논리적으로는 하나의 테이블이지만 물리적으로 여러 데이터 파일에 분산 저장
데이터 조회 범위를 줄여 성능 향상
=> Range Partition: 데이터 값의 범위를 기준으로 분할
=> List Partition: 특정한 값을 기준으로 분할
=> Hash Partition: 해시 함수를 적용하여 분할, DBMS가 알아서 분할 관리, 데이터 위치를 알 수 없음
=> Composite Partition: 여러 파티션 기법을 복합적으로 사용하여 분할
# 파티션 인덱스(Partition Index)
# Global Index, Local Index: 여러 파티션에서 단일 인덱스 사용, 파티션 별로 각자 인덱스 사용
# Prefixed / Non-Prefixed Index: 파티션키와 인덱스키 동일 및 구분

▶ 5절 DB 구조와 성능
1) 슈퍼/서브타입 데이터 모델 변환을 통한 성능 향상
=> 슈퍼/서브타입 데이터 모델: 속성을 할당하여 배치하는 수평 분할된 형태의 모델, 정확한 업무 표현 / 물리적 모델링 시 선택의 폭을 넓힐 수 있음 
(공통 속성은 슈퍼타입으로 모델링하고 차이가 있는 속성은 서브타입으로 구분됨) 
=> 변환 기준: 데이터 양 / 트랜잭션 유형
=> 변환 기술
- 1:1 타입: 개별로 처리하는 트랜잭션에 대해 개별 테이블 구성, 슈퍼/서브타입 각각 필요한 속성과 유형에 적합한 데이터만 가지도록 분리
- 슈퍼/서브 타입(Plus type): 슈퍼타입과 서브타입을 공통으로 처리하는 트랜잭션에 대해 각각의 테이블 구성
- All in One 타입(Single type): 일괄 처리하는 트랜잭션에 대해 단일 테이블 구성

* 각 타입별 특징
1:1 타입 -> 개별 테이블 유지 / 개별 처리 / 확장성 좋음 (테이블 추가 용이) / 조인 성능 나쁨 (많이 필요) / I/O성능 좋음 / 관리 비용이
슈퍼/서브 타입 -> 슈퍼/서브 타입 테이블 / 슈퍼/서브 타입 공통 처리 / 확장성 보통 / 조인 성능 나쁨 / I/O성능 좋음 / 관리 비용이
All in One 타입 -> 단일 테이블 구성 / 일괄 처리 / 확장성 나쁨 / 조인 성능 좋음 / I/O성능 나쁨 (항상 전체 데이터 조회) / 관리 용이

2) PK/FK 칼럼 순서 조절을 통한 성능 향상: 등호 조건이나 BETWEEN 조건이 갈리는 칼럼을 앞으로 이동
(여러 조건이 있을 경우 등호 조건이 걸리는 칼럼을 선두로 이동)

3) 인덱스 특성을 고려한 PK/FK DB 성능 향상: 물리적인 테이블에 FK 제약을 걸어 인덱스를 생성

▶ 6절 분산 DB 데이터에 따른 성능
1) 분산: 분산된 DB를 하나의 가상 시스템으로 사용할 수 있도록 한 DB (과거에는 위치 중심, 현재는 업무 필요에 따라 분산 설계)
물리적 사이트는 분산되어 있으나 논리적으로 동일한 시스템
=> 설계 방식
- 상향식: 지역 스키마 작성 후 전역 스키마 작성
- 하향식: 전역 스키마 작성 후 지역 스키마 작성
=> 장단점
- 장점: 신뢰성 및 가용성 증가 / 빠른 응답속도와 통신비용 절감 / 용량 확장 용이
- 단점: 관리.통제 어려움 / 데이터 무결성 관리 어려움 / SW 개발 비용 및 처리비용 증가 / 불규칙한 응답속도

2) 분산 DB의 투명성 분위지중장병행
=> 분할 투명성: 하나의 논리적 관계가 분할되어 각 단편의 사본이 여러 사이트에 저장됨
=> 위치 투명성: 사용하려는 데이터 저장 장소가 명시되지 않아도 됨
=> 지역사상 투명성: 지역 DBMS와 물리적 DB 사이의 사상이 보장됨
=> 중복 투명성: DB 객체 중복 여부를 몰라도 됨
=> 장애 투명성: 구성요소의 장애에 무관하게 트랜잭션의 원자성이 유지
=> 병행 투명성: 다수의 트랜잭션을 동시 수행했을 떄 결과의 일관성이 유지 (병렬 x)

3) 분산 DB 적용 기법
=> 테이블 위치 분산: 설계된 테이블의 위치를 분산함
=> 테이블 분할 분산(Table Fragmentation): 테이블을 쪼개서 분산
- 수평 및 수직 분할
=> 테이블 복제 분산(Table Replication): 동일한 테이블을 다른 지역이나 서버에서 동시 생성, 원격지 -> 내부 조인으로 변경하여 성능 
- 부분 및 광역 복제
=> 테이블 요약 분산(Table Summarization)
- 분석요약: 사이트 별 요약정보를 본사에서 통합하여 전체 요약정보 산출
- 통합요약: 사이트 별 모든 정보를 본사에서 통합하여 전체 요약정보 산출
